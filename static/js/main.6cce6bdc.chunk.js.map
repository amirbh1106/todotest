{"version":3,"sources":["components /login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loginpage","useState","usern","setnuser","userp","setpuser","user","setuser","className","style","color","placeholder","value","onChange","e","target","onClick","alert","aproved","App","exact","path","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAiBO,SAASA,IAAY,IAAD,EACHC,mBAAS,IADN,mBACrBC,EADqB,KACfC,EADe,OAEHF,mBAAS,IAFN,mBAErBG,EAFqB,KAEfC,EAFe,OAGLJ,mBAAkB,IAHb,mBAGrBK,EAHqB,KAGhBC,EAHgB,KA4B3B,OACI,yBAAKC,UAAU,aACX,wBAAIC,MAAO,CAACC,MAAO,UAAnB,iBACA,2BAAOF,UAAU,WAAWG,YAAY,WAAWC,MAAOV,EAAOW,SA1BzE,SAAuBC,GACnBX,EAASW,EAAEC,OAAOH,UAyBoF,4BAAQI,QApBlH,WACiB,KAAVd,GAA0B,KAAVE,EACfa,MAAM,iDAEQ,KAAVf,EACJe,MAAM,8BAEQ,KAAVb,EACJa,MAAM,+BAELV,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAACJ,QAAQE,QAAQc,SAAQ,MAChDf,EAAS,IACTE,EAAS,MAQ4HG,UAAU,UAAzC,UAClG,2BAAOA,UAAU,WAAWG,YAAY,WAAWC,MAAOR,EAAOS,SAxBzE,SAAuBC,GACnBT,EAASS,EAAEC,OAAOH,W,mBCCPO,MAlBf,WACE,OACE,yBAAKX,UAAU,OACZ,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,KACb,kBAACrB,EAAD,OAEJ,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,QACd,mCACA,mEACA,kBAAC,IAAD,CAAMC,GAAG,KAAT,wBCPQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6cce6bdc.chunk.js","sourcesContent":["import React, { useState} from 'react';\n// import {Todoall} from './todo';\nimport './cssfiles/login.css';\n// import {\n//     BrowserRouter as Router,\n//     Switch,\n//     Route,\n//     Link\n//   } from \"react-router-dom\";\n\ninterface IUser {\n    usern:string \n    userp:string\n    aproved:boolean\n}\n\n\nexport function Loginpage(){\nconst[usern,setnuser] = useState(\"\");\nconst[userp,setpuser] = useState(\"\");\nconst[user,setuser] = useState<IUser[]>([])\n\nfunction handleuChange(e:any){\n    setnuser(e.target.value)\n}\nfunction handlepChange(e:any){\n    setpuser(e.target.value)\n}\nfunction handlesubmit(){\n    if(usern === \"\" && userp === \"\"){\n        alert(\"sorry please write you user name and password\")\n    }\n    else if(usern === \"\"){\n        alert(\"please write your username\")\n    }\n    else if(userp === \"\"){\n        alert(\"please write your password\")\n    }\n    else{setuser([...user, {usern , userp , aproved:false}])\n    setnuser(\"\");\n    setpuser(\"\");\n    }\n    \n}\n\nreturn(\n    <div className=\"loginpage\">\n        <h1 style={{color: 'white'}}>amir todo app</h1>\n        <input className=\"username\" placeholder=\"username\" value={usern} onChange={handleuChange}></input><button onClick={handlesubmit} className=\"submit\">submit</button>\n        <input className=\"password\" placeholder=\"password\" value={userp} onChange={handlepChange}></input>\n    </div>\n)\n}","import React from 'react';\nimport './App.css';\nimport {Loginpage} from './components /login'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Router>\n       <Route exact path=\"/\">\n            <Loginpage />\n        </Route>\n        <Route exact path=\"/hay\">\n            <h1>hay</h1>\n            <p>you need to start from the beginning</p>\n            <Link to=\"/\">to the beginning</Link>\n        </Route>\n      </Router>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}