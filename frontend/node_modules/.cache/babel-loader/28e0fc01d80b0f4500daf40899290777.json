{"ast":null,"code":"var _jsxFileName = \"/home/amir/Desktop/todotest/src/components /todo.tsx\";\nimport React, { useState } from 'react';\nimport { Input } from './Input';\nimport { Todocomp } from './Todocomp';\nexport function Todoall() {\n  const [textarr, settextarr] = useState([]);\n\n  function todoadded(todo) {\n    if (todo === \"\") {\n      alert(\"you cant add nothing brov\");\n    } else {\n      settextarr([...textarr, {\n        todo,\n        complete: false\n      }]);\n    }\n  }\n\n  function onremove(index) {\n    textarr[index].complete = !textarr[index].complete;\n    settextarr([...textarr]);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    added: todoadded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }), textarr.map((c, index) => /*#__PURE__*/React.createElement(Todocomp, {\n    todo: c.todo,\n    state: c.complete,\n    passindex: index,\n    key: index,\n    remove: onremove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 37\n    }\n  })));\n}","map":{"version":3,"sources":["/home/amir/Desktop/todotest/src/components /todo.tsx"],"names":["React","useState","Input","Todocomp","Todoall","textarr","settextarr","todoadded","todo","alert","complete","onremove","index","map","c"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AACA,SAAQC,KAAR,QAAoB,SAApB;AACA,SAAQC,QAAR,QAAuB,YAAvB;AAOA,OAAO,SAASC,OAAT,GAAkB;AACrB,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBL,QAAQ,CAAU,EAAV,CAArC;;AAEA,WAASM,SAAT,CAAmBC,IAAnB,EAA+B;AAC3B,QAAGA,IAAI,KAAK,EAAZ,EAAe;AACXC,MAAAA,KAAK,CAAC,2BAAD,CAAL;AACH,KAFD,MAEK;AACLH,MAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAa;AAACG,QAAAA,IAAD;AAAQE,QAAAA,QAAQ,EAAG;AAAnB,OAAb,CAAD,CAAV;AACC;AACJ;;AACD,WAASC,QAAT,CAAkBC,KAAlB,EAA+B;AAC3BP,IAAAA,OAAO,CAACO,KAAD,CAAP,CAAeF,QAAf,GAA0B,CAACL,OAAO,CAACO,KAAD,CAAP,CAAeF,QAA1C;AACAJ,IAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,CAAD,CAAV;AAEH;;AACD,sBACI;AAAK,IAAA,KAAK,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEE,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAECF,OAAO,CAACQ,GAAR,CAAY,CAACC,CAAD,EAAKF,KAAL,kBAAe,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEE,CAAC,CAACN,IAAlB;AAAwB,IAAA,KAAK,EAAEM,CAAC,CAACJ,QAAjC;AAA2C,IAAA,SAAS,EAAEE,KAAtD;AAA6D,IAAA,GAAG,EAAEA,KAAlE;AAAyE,IAAA,MAAM,EAAED,QAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA3B,CAFD,CADJ;AAMH","sourcesContent":["import React, { useState} from 'react';\nimport {Input} from './Input'\nimport {Todocomp} from './Todocomp'\n\ninterface ITodo {\n    todo:string \n    complete:boolean\n}\n\nexport function Todoall(){\n    const [textarr,settextarr] = useState<ITodo[]>([])\n\n    function todoadded(todo:string){\n        if(todo === \"\"){\n            alert(\"you cant add nothing brov\");\n        }else{\n        settextarr([...textarr, {todo , complete : false}]);\n        }\n    }\n    function onremove(index:number){\n        textarr[index].complete = !textarr[index].complete;\n        settextarr([...textarr]);\n        \n    }\n    return(\n        <div class>\n        <Input added={todoadded}/>\n        {textarr.map((c , index )=> <Todocomp todo={c.todo} state={c.complete} passindex={index} key={index} remove={onremove}/>)}\n        </div>\n    )\n}\n\n    "]},"metadata":{},"sourceType":"module"}